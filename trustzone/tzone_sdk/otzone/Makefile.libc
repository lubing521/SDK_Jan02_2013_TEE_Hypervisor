#ifndef SDK_PATH
#$(error SDK_PATH must be defined before this file is included)
#endif

#export $BOARD
#export $ARM_CPU
#export $ARM_ARCH


SHELL := /bin/bash
cur_dir=$(SDK_PATH)/otzone
build_dir=$(cur_dir)/libc_build
src_dir=$(cur_dir)/src
LIBNAME=$(build_dir)/libc_sos.a


# Check if verbosity is ON for build process
VERBOSE_DEFAULT    := 0
CMD_PREFIX_DEFAULT := @
ifdef VERBOSE
	ifeq ("$(origin VERBOSE)", "command line")
		VB := $(VERBOSE)
	else
		VB := $(VERBOSE_DEFAULT)
	endif
else
	VB := $(VERBOSE_DEFAULT)
endif
ifeq ($(VB), 1)
	V :=
else
	V := $(CMD_PREFIX_DEFAULT)
endif

# Name & Version
export DEPENDENCY_FILE=$(build_dir)/.deps

ifeq ($(BOARD), VE)
export CONFIG_FILE= $(cur_dir)/config/config.ve
export BOARD_DIR=ve
else
export CONFIG_FILE= $(cur_dir)/config/config.eb
export BOARD_DIR=eb
endif

ifeq ($(ARM_ARCH), ARMV7)
export ARCH_DIR=armv7
endif

# Include configuration file if present
-include $(CONFIG_FILE)

ifeq ($(ARM_CPU), CORTEX_A8)
TARGET_CCFLAGS += -DCONFIG_CORTEX_A8=1 -mcpu=cortex-a8
TARGET_ASMFLAGS += -DCONFIG_CORTEX_A8=1 -mcpu=cortex-a8
export PLATFORM_DIR=Cortex-A8
endif

ifeq ($(ARM_CPU), CORTEX_A9)
TARGET_CCFLAGS += -DCONFIG_CORTEX_A9=1 -mcpu=cortex-a9
TARGET_ASMFLAGS += -DCONFIG_CORTEX_A9=1 -mcpu=cortex-a9
export PLATFORM_DIR=Cortex-A9
endif

ifeq ($(ARM_CPU), CORTEX_A15)
TARGET_CCFLAGS += -DCONFIG_CORTEX_A15=1 -march=armv7-a
TARGET_ASMFLAGS += -DCONFIG_CORTEX_A15=1 -march=armv7-a
export PLATFORM_DIR=Cortex-A15
endif


# Setup path of directories
export lib_dir=$(src_dir)/lib

# Setup list of objects for compilation
lib-object-mks=$(shell if [[ -d $(lib_dir) ]]; then find $(lib_dir) -iname "objects.mk" | sort -r; fi)

include $(lib-object-mks) 

objs-y+=$(foreach obj,$(lib-objs-y),$(build_dir)/lib/$(obj))

# Setup list of deps files for compilation
deps-y=$(objs-y:.o=.dep)


# Setup compilation environment
cpp=$(CROSS_COMPILE)cpp
cppflags=-I$(SDK_PATH)/include
cppflags+=-I$(src_dir)/lib/include
cppflags+=-I$(src_dir)/core/include
cppflags+=-I$(src_dir)/apps/include
cppflags+=-I$(src_dir)/arch/arm/$(ARCH_DIR)/include
cppflags+=-I$(src_dir)/drivers/common/include
cppflags+=-I$(src_dir)/drivers/$(BOARD_DIR)/include
cppflags+=-I$(src_dir)/arch/arm/$(ARCH_DIR)/$(PLATFORM_DIR)/include


cc=$(CROSS_COMPILE)gcc
cflags=-g -Wall -nostdlib
cflags+=-msoft-float -mno-thumb-interwork -marm -fno-short-enums 
cflags+=$(cppflags) $(TARGET_CCFLAGS)
as=$(CROSS_COMPILE)gcc
asflags=-g -Wall -nostdlib -D__ASSEMBLY__ 
asflags+= -mno-thumb-interwork -marm
asflags+=$(cppflags) $(TARGET_ASMFLAGS)
ar=$(CROSS_COMPILE)ar
arflags=rcs
nm=$(CROSS_COMPILE)nm
ranlib=$(CROSS_COMPILE)ranlib
rm=rm

final-objs-y=$(objs-y)


# Default rule "make"
.PHONY: all
all: $(CONFIG_FILE) $(DEPENDENCY_FILE) $(LIBNAME)

-include $(DEPENDENCY_FILE)
$(DEPENDENCY_FILE): $(deps-y)
	@echo "where is dep file"
	$(V)cat $(deps-y) > $(DEPENDENCY_FILE)

$(LIBNAME) : $(final-objs-y)
	$(ar) $(arflags) $@ $(final-objs-y)
	$(ranlib) $@

$(build_dir)/%.dep: $(src_dir)/%.S
	@echo "gen dep file"
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (as-dep)    $(subst $(build_dir)/,,$@)")
	$(V)echo -n `dirname $@`/ > $@
	$(V)$(as) $(asflags) -I`dirname $<` -MM $< >> $@

$(build_dir)/%.dep: $(src_dir)/%.c
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (cc-dep)    $(subst $(build_dir)/,,$@)")
	$(V)echo -n `dirname $@`/ > $@
	$(V)$(cc) $(cflags) -I`dirname $<` -MM $< >> $@

$(build_dir)/%.o: $(src_dir)/%.S
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (as)        $(subst $(build_dir)/,,$@)")
	$(V)$(as) $(asflags) -I`dirname $<` -c $< -o $@

$(build_dir)/%.o: $(build_dir)/%.S
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (as)        $(subst $(build_dir)/,,$@)")
	$(V)$(as) $(asflags) -I`dirname $<` -c $< -o $@

$(build_dir)/%.o: $(src_dir)/%.c
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (cc)        $(subst $(build_dir)/,,$@)")
	$(V)$(cc) $(cflags) -I`dirname $<` -c $< -o $@

$(build_dir)/%.o: $(build_dir)/%.c
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (cc)        $(subst $(build_dir)/,,$@)")
	$(V)$(cc) $(cflags) -I`dirname $<` -c $< -o $@

# Rule for "make clean"
.PHONY: clean
clean:
ifeq ($(build_dir),$(cur_dir)/libc_build)
	$(if $(V), @echo " (rm)        $(build_dir)")
	$(V)rm -rf $(build_dir)
endif

.PHONY: tags
tags:
	$(V)ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
	$(V)echo "Generating tags ..."

.PHONY: cscope
cscope:
	$(V)echo "Generating cscope database ..."
	$(V)find ./ -name "*.[CHSchs]" > cscope.files
	$(V)cscope -bqk

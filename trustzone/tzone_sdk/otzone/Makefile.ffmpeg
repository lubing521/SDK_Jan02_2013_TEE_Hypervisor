SHELL := /bin/bash
cur_dir=$(SDK_PATH)/otzone
build_dir=$(cur_dir)/ffmpeg-build
src_dir=$(cur_dir)/src

bin_dir=$(cur_dir)/../bin
ffmpeg_dir=$(SDK_PATH)/../ffmpeg/
sdl_dir=$(SDK_PATH)/../libsdl/

KERNEL_ELF = $(bin_dir)/normal.elf
KERNEL = $(cur_dir)/normal.bin

# Check if verbosity is ON for build process
VERBOSE_DEFAULT    := 0
CMD_PREFIX_DEFAULT := @
ifdef VERBOSE
	ifeq ("$(origin VERBOSE)", "command line")
		VB := $(VERBOSE)
	else
		VB := $(VERBOSE_DEFAULT)
	endif
else
	VB := $(VERBOSE_DEFAULT)
endif
ifeq ($(VB), 1)
	V :=
else
	V := $(CMD_PREFIX_DEFAULT)
endif

# Name & Version
export PROJECT_NAME = otzone-ffmpeg
export PROJECT_VERSION = 0.1
export DEPENDENCY_FILE=$(build_dir)/.deps

ifeq ($(BOARD), VE)
export CONFIG_FILE= $(cur_dir)/config/config.ve
export BOARD_DIR=ve
else
export CONFIG_FILE= $(cur_dir)/config/config.eb
export BOARD_DIR=eb
endif

ifeq ($(ARM_ARCH), ARMV7)
export ARCH_DIR=armv7
endif

# Include configuration file if present
-include $(CONFIG_FILE)

ifeq ($(ARM_CPU), CORTEX_A8)
TARGET_CCFLAGS += -DCONFIG_CORTEX_A8=1 -mcpu=cortex-a8
TARGET_ASMFLAGS += -DCONFIG_CORTEX_A8=1 -mcpu=cortex-a8
export PLATFORM_DIR=Cortex-A8
endif

ifeq ($(ARM_CPU), CORTEX_A9)
TARGET_CCFLAGS += -DCONFIG_CORTEX_A9=1 -mcpu=cortex-a9
TARGET_ASMFLAGS += -DCONFIG_CORTEX_A9=1 -mcpu=cortex-a9
export PLATFORM_DIR=Cortex-A9
endif

ifeq ($(ARM_CPU), CORTEX_A15)
TARGET_CCFLAGS += -DCONFIG_CORTEX_A15=1 -march=armv7-a
TARGET_ASMFLAGS += -DCONFIG_CORTEX_A15=1 -march=armv7-a
export PLATFORM_DIR=Cortex-A15
endif

ifeq ($(OTZONE_ASYNC_NOTIFY_SUPPORT), y)
TARGET_CCFLAGS += -DOTZONE_ASYNC_NOTIFY_SUPPORT=y
TARGET_ASMFLAGS += -DOTZONE_ASYNC_NOTIFY_SUPPORT=y
endif


# Setup path of directories
export lib_dir=$(src_dir)/lib
export cpu_arch_dir=$(src_dir)/arch/arm/$(ARCH_DIR)
export cpu_platform_dir=$(src_dir)/arch/arm/$(ARCH_DIR)/$(PLATFORM_DIR)
export drivers_common_dir=$(src_dir)/drivers/common
export drivers_dir=$(src_dir)/drivers/$(BOARD_DIR)
export core_dir=$(src_dir)/core
export apps_dir=$(src_dir)/apps

offsets-file= $(cpu_arch_dir)/include/asm-offsets.h
LD_SCRIPT	= $(drivers_dir)/linker.ld

# Setup list of objects for compilation
lib-object-mks=$(shell if [[ -d $(lib_dir) ]]; then find $(lib_dir) -iname "ffmpeg-objects.mk" | sort -r; fi)
core-object-mks=$(shell if [[ -d $(core_dir) ]]; then find $(core_dir) -iname "objects.mk" | sort -r; fi)
apps-object-mks=$(shell if [[ -d $(apps_dir) ]]; then find $(apps_dir) -iname "objects.mk" | sort -r; fi)
cpu-object-mks=$(shell if [ -d $(cpu_arch_dir) ]; then find $(cpu_arch_dir) -iname "objects.mk" | sort -r; fi)
cpu-platform-mks=$(shell if [ -d $(cpu_platform_dir) ]; then find $(cpu_platform_dir) -iname "platform_objects.mk" | sort -r; fi)
drivers-common-object-mks=$(shell if [ -d $(drivers_common_dir) ]; then find $(drivers_common_dir) -iname "objects.mk" | sort -r; fi)
drivers-object-mks=$(shell if [ -d $(drivers_dir) ]; then find $(drivers_dir) -iname "objects.mk" | sort -r; fi)
sdl-object-mks=$(shell if [ -d $(sdl_dir) ]; then find $(sdl_dir) -iname "objects.mk" | sort -r; fi)

include $(lib-object-mks) 
include $(core-object-mks) 
include $(apps-object-mks) 
include $(drivers-common-object-mks) 
include $(drivers-object-mks) 
include $(cpu-object-mks) 
include $(cpu-platform-mks) 
include $(sdl-object-mks)

objs-y+=$(foreach obj,$(lib-objs-y),$(build_dir)/lib/$(obj))
objs-y+=$(foreach obj,$(core-objs-y),$(build_dir)/core/$(obj))
objs-y+=$(foreach obj,$(apps-objs-y),$(build_dir)/apps/$(obj))
objs-y+=$(foreach obj,$(drivers-common-objs-y),$(build_dir)/drivers/common/$(obj))
objs-y+=$(foreach obj,$(drivers-objs-y),$(build_dir)/drivers/$(BOARD_DIR)/$(obj))
objs-y+=$(foreach obj,$(cpu-objs-y),$(build_dir)/arch/arm/$(ARCH_DIR)/$(obj))
objs-y+=$(foreach obj,$(cpu-platform-objs-y),$(build_dir)/arch/arm/$(ARCH_DIR)/$(PLATFORM_DIR)/$(obj))

# Setup list of deps files for compilation
deps-y=$(objs-y:.o=.dep)

# Setup list of targets for compilation
targets-y=$(build_dir)/otzone-ffmpeg.elf

#targets-y+=$(build_dir)/otzone.bin


# Setup compilation environment
cpp=$(CROSS_COMPILE_NEWLIB)cpp
cppflags=-I$(SDK_PATH)/include
cppflags+=-I$(src_dir)/lib/include
cppflags+=-I$(src_dir)/core/include
cppflags+=-I$(src_dir)/apps/include
cppflags+=-I$(src_dir)/arch/arm/$(ARCH_DIR)/include
cppflags+=-I$(src_dir)/drivers/common/include

cppflags+=-I$(src_dir)/drivers/$(BOARD_DIR)/include
cppflags+=-I$(src_dir)/arch/arm/$(ARCH_DIR)/$(PLATFORM_DIR)/include

cc=$(CROSS_COMPILE_NEWLIB)gcc
#cflags=-g -Wall -nostdlib -D_OTZ_NO_LIBC_BUILD=1
cflags=-g -Wall -D_OTZ_NO_LIBC_BUILD=1 -D_FFMPEG_BUILD
cflags+=-msoft-float -mno-thumb-interwork -marm -fno-short-enums 
cflags+=$(cppflags) $(TARGET_CCFLAGS)
as=$(CROSS_COMPILE_NEWLIB)gcc
#asflags=-g -Wall -nostdlib -D__ASSEMBLY__ 
asflags=-g -Wall -D__ASSEMBLY__ 
asflags+= -mno-thumb-interwork -marm
asflags+=$(cppflags) $(TARGET_ASMFLAGS)
ar=$(CROSS_COMPILE_NEWLIB)ar
arflasgs=rcs
ld=$(CROSS_COMPILE_NEWLIB)gcc
#ldflags=-g -Wall -nostdlib 
ldflags=-g -Wall
ldflags+=-Wl,-T$(LD_SCRIPT)
objcopy=$(CROSS_COMPILE_NEWLIB)objcopy
nm=$(CROSS_COMPILE_NEWLIB)nm

final-objs-y=$(objs-y)
ffmpeg_libs = -L$(ffmpeg_dir)/libswresample/ -lswresample
ffmpeg_libs+= -L$(ffmpeg_dir)/libavformat/ -lavformat
ffmpeg_libs+= -L$(ffmpeg_dir)/libavfilter/ -lavfilter
ffmpeg_libs+= -L$(ffmpeg_dir)/libswscale/ -lswscale
ffmpeg_libs+= -L$(ffmpeg_dir)/libavresample/ -lavresample
ffmpeg_libs+= -L$(ffmpeg_dir)/libavcodec/ -lavcodec
ffmpeg_libs+= -L$(ffmpeg_dir)/libavutil/ -lavutil
ffmpeg_libs+= -L$(ffmpeg_dir)/libavdevice/ -lavdevice
sdl_libs = -L$(sdl_dir) -lSDL
math_lib = -lm

# Default rule "make"
.PHONY: all
all: $(CONFIG_FILE) $(offsets-file) $(DEPENDENCY_FILE) $(KERNEL) $(targets-y)

test:
	@echo $(objs-y)

-include $(DEPENDENCY_FILE)
$(DEPENDENCY_FILE): $(deps-y)
	@echo "where is dep file"
	$(V)cat $(deps-y) > $(DEPENDENCY_FILE)

# Rules to build .S and .c files
#$(build_dir)/otzone.bin: $(build_dir)/otzone.elf
#	$(V)mkdir -p `dirname $@`
#	$(if $(V), @echo " (objcopy)   $(subst $(build_dir)/,,$@)")
#	$(V)$(objcopy) -O binary $< $@

$(KERNEL) :
	$(V)$(objcopy) -O binary $(KERNEL_ELF) $@

$(build_dir)/otzone-ffmpeg.elf: $(final-objs-y) $(KERNEL)
	$(V)mkdir -p `dirname $@`
	$(MAKE) -C $(ffmpeg_dir)
	$(MAKE) -C $(sdl_dir)
	$(if $(V), @echo " (ld)        $(subst $(build_dir)/,,$@)")
	$(V)$(ld) $(final-objs-y) $(ffmpeg_libs) $(sdl_libs) $(math_lib) $(ldflags) -o $@
	$(V)cp -f $@ $(bin_dir)
	$(V)rm -f $(KERNEL)

$(build_dir)/%.dep: $(src_dir)/%.S
	@echo "gen dep file"
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (as-dep)    $(subst $(build_dir)/,,$@)")
	$(V)echo -n `dirname $@`/ > $@
	$(V)$(as) $(asflags) -I`dirname $<` -MM $< >> $@

$(build_dir)/%.dep: $(src_dir)/%.c
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (cc-dep)    $(subst $(build_dir)/,,$@)")
	$(V)echo -n `dirname $@`/ > $@
	$(V)$(cc) $(cflags) -I`dirname $<` -MM $< >> $@

$(build_dir)/%.o: $(src_dir)/%.S
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (as)        $(subst $(build_dir)/,,$@)")
	$(V)$(as) $(asflags) -I`dirname $<` -c $< -o $@

$(build_dir)/%.o: $(build_dir)/%.S
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (as)        $(subst $(build_dir)/,,$@)")
	$(V)$(as) $(asflags) -I`dirname $<` -c $< -o $@

$(build_dir)/%.o: $(src_dir)/%.c
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (cc)        $(subst $(build_dir)/,,$@)")
	$(V)$(cc) $(cflags) -I`dirname $<` -c $< -o $@

$(build_dir)/%.o: $(build_dir)/%.c
	$(V)mkdir -p `dirname $@`
	$(if $(V), @echo " (cc)        $(subst $(build_dir)/,,$@)")
	$(V)$(cc) $(cflags) -I`dirname $<` -c $< -o $@

define sed-y
        "/^->/{s:->#\(.*\):/* \1 */:; \
        s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
        s:->::; p;}"
endef

$(cpu_arch_dir)/asm-offsets.s: $(cpu_arch_dir)/asm-offsets.c
	$(V)$(cc) $(cflags) -S -I`dirname $<` -c $< -o $@

$(offsets-file): $(cpu_arch_dir)/asm-offsets.s
	sed -ne $(sed-y) $< >> $@

# Rule for "make clean"
.PHONY: clean
clean:
ifeq ($(build_dir),$(cur_dir)/ffmpeg-build)
	$(if $(V), @echo " (rm)        $(build_dir)")
	$(V)rm -rf $(build_dir)
endif
	rm -f $(offsets-file)
	rm -f $(cpu_arch_dir)/asm-offsets.s; 
	$(MAKE) -C $(ffmpeg_dir) clean
	$(MAKE) -C $(sdl_dir) clean
.PHONY: tags
tags:
	$(V)ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .
	$(V)echo "Generating tags ..."

.PHONY: cscope
cscope:
	$(V)echo "Generating cscope database ..."
	$(V)find ./ -name "*.[CHSchs]" > cscope.files
	$(V)cscope -bqk

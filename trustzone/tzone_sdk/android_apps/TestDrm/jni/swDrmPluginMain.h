/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <DrmEngineBase.h>
#include <string.h>
#include <drm/DrmRights.h>
#include <drm/DrmConstraints.h>
#include <drm/DrmMetadata.h>
#include <drm/DrmInfo.h>
#include <drm/DrmInfoEvent.h>
#include <drm/DrmInfoStatus.h>
#include <drm/DrmConvertedStatus.h>
#include <drm/DrmInfoRequest.h>
#include <drm/DrmSupportInfo.h>
#include <utils/String8.h>

extern "C" {
#include <otz_drm_app.h>
}
/* Header for class com_example_testdrm_JniInterface */

//extern "C" int smc_drm(void* buffer, int length);

#ifndef _Included_com_example_testdrm_JniInterface
#define _Included_com_example_testdrm_JniInterface
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_example_testdrm_JniInterface
 * Method:    testDrm
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_testdrm_JniInterface_testDrm
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_example_testdrm_JniInterface
 * Method:    initDrmEngine
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_example_testdrm_JniInterface_initDrmEngine
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif

namespace android {
    class SwDrmPlugin : public DrmEngineBase {
        public:
            SwDrmPlugin();
            virtual ~SwDrmPlugin();
        protected:
	    int filedes;
            DrmConstraints* onGetConstraints(int uniqueId, const String8* path,
                                                                    int action);
            DrmMetadata* onGetMetadata(int uniqueId, const String8* path);
            status_t onInitialize(int uniqueId);
            status_t onSetOnInfoListener(int uniqueId,
                                const IDrmEngine::OnInfoListener* infoListener);
            status_t onTerminate(int uniqueId);
            bool onCanHandle(int uniqueId, const String8& path);
            DrmInfoStatus* onProcessDrmInfo(int uniqueId, const DrmInfo* drmInfo);
            status_t onSaveRights(int uniqueId, const DrmRights& drmRights,
                    const String8& rightsPath, const String8& contentPath);
            DrmInfo* onAcquireDrmInfo(int uniqueId,
                                        const DrmInfoRequest* drmInfoRequest);
            String8 onGetOriginalMimeType(int uniqueId, const String8& path);
            int onGetDrmObjectType(int uniqueId,
                                  const String8& path, const String8& mimeType);
            int onCheckRightsStatus(int uniqueId, const String8& path, int action);
            status_t onConsumeRights(int uniqueId,
                        DecryptHandle* decryptHandle, int action, bool reserve);
            status_t onSetPlaybackStatus(int uniqueId,
                                DecryptHandle* decryptHandle,
                                        int playbackStatus, int64_t position);
            bool onValidateAction(int uniqueId, const String8& path,
                            int action, const ActionDescription& description);
            status_t onRemoveRights(int uniqueId, const String8& path);
            status_t onRemoveAllRights(int uniqueId);
            status_t onOpenConvertSession(int uniqueId, int convertId);
            DrmConvertedStatus* onConvertData(int uniqueId, int convertId,
                                                    const DrmBuffer* inputData);
            DrmConvertedStatus* onCloseConvertSession(int uniqueId, int convertId);
            DrmSupportInfo* onGetSupportInfo(int uniqueId);
            status_t onOpenDecryptSession(int uniqueId,
                                DecryptHandle* decryptHandle,
                                        int fd, off64_t offset, off64_t length);
            status_t onOpenDecryptSession(int uniqueId,
                                DecryptHandle* decryptHandle, const char* uri);
            status_t onCloseDecryptSession(int uniqueId, DecryptHandle* decryptHandle);
            status_t onInitializeDecryptUnit(int uniqueId,
                                    DecryptHandle* decryptHandle,
                                int decryptUnitId, const DrmBuffer* headerInfo);
            status_t onDecrypt(int uniqueId,
                            DecryptHandle* decryptHandle, int decryptUnitId,
                            const DrmBuffer* encBuffer, DrmBuffer** decBuffer,
                                                                DrmBuffer* IV);
            status_t onFinalizeDecryptUnit(int uniqueId,
                                DecryptHandle* decryptHandle, int decryptUnitId);
            ssize_t onPread(int uniqueId, DecryptHandle* decryptHandle,
                                void* buffer, ssize_t numBytes, off64_t offset);
    };
};

#endif

